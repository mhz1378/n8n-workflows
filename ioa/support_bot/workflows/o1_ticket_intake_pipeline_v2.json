{
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -320,
        1104
      ],
      "id": "082f8c15-fe77-44ee-b1c4-f2f44d0dedf7",
      "name": "01 Telegram Trigger: Intake + Status",
      "webhookId": "ce5e4331-643e-4f6f-b465-96e93b097863",
      "notesInFlow": true,
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      },
      "notes": "Listens for Telegram bot messages. Routes commands like /start, /new, /status, /update, /list into the Switch node."
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ce357ab4-c67e-4bf7-b791-9f90b568aa28",
                    "leftValue": "={{ $json[\"message\"][\"text\"].split(\" \")[0].toLowerCase() }}",
                    "rightValue": "/start",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "/start"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json[\"message\"][\"text\"].split(\" \")[0].toLowerCase() }}",
                    "rightValue": "/status",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "5c875ce6-1a63-42bc-b828-426e56fedd7d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "/status"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "db0d9d53-1fa2-4b95-b4ed-026ea97ac21f",
                    "leftValue": "={{ $json[\"message\"][\"text\"].split(\" \")[0].toLowerCase() }}",
                    "rightValue": "/new",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "/new"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "54b2e9fb-1cd5-4634-a7e9-d29c936d0f9d",
                    "leftValue": "={{ $json[\"message\"][\"text\"].split(\" \")[0].toLowerCase() }}",
                    "rightValue": "/update",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "/update"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1c4a4f1b-1f99-4a5d-93d3-48887d112dc2",
                    "leftValue": "={{ $json[\"message\"][\"text\"].split(\" \")[0].toLowerCase() }}",
                    "rightValue": "/list",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "/list"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -64,
        1040
      ],
      "id": "79eb3cbc-fe67-474a-a9d7-eff71ee33db9",
      "name": "02 Switch: Route by Command",
      "notesInFlow": true,
      "notes": "Splits incoming commands into different branches. Output keys = command names (/new, /status, etc.). Fallback = Invalid Command."
    },
    {
      "parameters": {
        "jsCode": "// ---------- tiny SHA-256 (pure JS, no imports) ----------\nfunction sha256(message) {\n  // convert string to bytes (UTF-8)\n  function toBytes(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) {\n      let c = str.charCodeAt(i);\n      if (c < 0x80) bytes.push(c);\n      else if (c < 0x800) { bytes.push(0xc0 | (c >> 6), 0x80 | (c & 0x3f)); }\n      else if (c < 0xD800 || c >= 0xE000) {\n        bytes.push(0xE0 | (c >> 12), 0x80 | ((c >> 6) & 0x3F), 0x80 | (c & 0x3F));\n      } else {\n        // surrogate pair\n        i++;\n        const c2 = str.charCodeAt(i);\n        const codePoint = 0x10000 + (((c & 0x3FF) << 10) | (c2 & 0x3FF));\n        bytes.push(\n          0xF0 | (codePoint >> 18),\n          0x80 | ((codePoint >> 12) & 0x3F),\n          0x80 | ((codePoint >> 6) & 0x3F),\n          0x80 | (codePoint & 0x3F)\n        );\n      }\n    }\n    return bytes;\n  }\n  function rotr(n, x) { return (x >>> n) | (x << (32 - n)); }\n  function toHex(n) { return ('00000000' + (n >>> 0).toString(16)).slice(-8); }\n\n  const K = [\n    0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,\n    0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,\n    0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,\n    0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,\n    0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,\n    0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,\n    0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,\n    0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2\n  ];\n\n  let H0 = 0x6a09e667, H1 = 0xbb67ae85, H2 = 0x3c6ef372, H3 = 0xa54ff53a;\n  let H4 = 0x510e527f, H5 = 0x9b05688c, H6 = 0x1f83d9ab, H7 = 0x5be0cd19;\n\n  const bytes = toBytes(message);\n  const bitLen = bytes.length * 8;\n\n  // padding\n  bytes.push(0x80);\n  while ((bytes.length % 64) !== 56) bytes.push(0);\n  // append length\n  for (let i = 7; i >= 0; i--) bytes.push((bitLen >>> (i * 8)) & 0xff);\n\n  // process chunks\n  const W = new Array(64);\n  for (let i = 0; i < bytes.length; i += 64) {\n    for (let t = 0; t < 16; t++) {\n      const j = i + t * 4;\n      W[t] = (bytes[j] << 24) | (bytes[j + 1] << 16) | (bytes[j + 2] << 8) | (bytes[j + 3]);\n    }\n    for (let t = 16; t < 64; t++) {\n      const s0 = rotr(7, W[t - 15]) ^ rotr(18, W[t - 15]) ^ (W[t - 15] >>> 3);\n      const s1 = rotr(17, W[t - 2]) ^ rotr(19, W[t - 2]) ^ (W[t - 2] >>> 10);\n      W[t] = (W[t - 16] + s0 + W[t - 7] + s1) | 0;\n    }\n\n    let a = H0, b = H1, c = H2, d = H3, e = H4, f = H5, g = H6, h = H7;\n\n    for (let t = 0; t < 64; t++) {\n      const S1 = rotr(6, e) ^ rotr(11, e) ^ rotr(25, e);\n      const ch = (e & f) ^ (~e & g);\n      const temp1 = (h + S1 + ch + K[t] + W[t]) | 0;\n      const S0 = rotr(2, a) ^ rotr(13, a) ^ rotr(22, a);\n      const maj = (a & b) ^ (a & c) ^ (b & c);\n      const temp2 = (S0 + maj) | 0;\n\n      h = g; g = f; f = e;\n      e = (d + temp1) | 0;\n      d = c; c = b; b = a;\n      a = (temp1 + temp2) | 0;\n    }\n\n    H0 = (H0 + a) | 0; H1 = (H1 + b) | 0; H2 = (H2 + c) | 0; H3 = (H3 + d) | 0;\n    H4 = (H4 + e) | 0; H5 = (H5 + f) | 0; H6 = (H6 + g) | 0; H7 = (H7 + h) | 0;\n  }\n  return toHex(H0) + toHex(H1) + toHex(H2) + toHex(H3) + toHex(H4) + toHex(H5) + toHex(H6) + toHex(H7);\n}\n// ---------- end SHA-256 ----------\n\n// Pull the Telegram text\nconst text = $input.first().json.message.text || \"\";\n\nfunction extract(pattern) {\n  const m = text.match(pattern);\n  return m ? m[1].trim() : \"\";\n}\n\n// Parse fields\nconst parsed = {\n  requester_name:  extract(/Name:\\s*(.*)/i),\n  requester_email: extract(/Email:\\s*([\\w.-]+@[\\w.-]+)/i),\n  requester_phone: extract(/Phone:\\s*(\\+?\\d+)/i),\n  subject:         extract(/Subject:\\s*(.*)/i),\n  description:     extract(/Description:\\s*(.*)/i),\n  source:  \"telegram\",\n  priority: \"normal\",\n  status:   \"new\",\n};\n\n// Dedupe key = sha256(email|subject)\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nconst dedupeSource = `${parsed.requester_email || \"none\"}|${parsed.subject || \"none\"}`;\nparsed.dedupe_key = sha256(dedupeSource);\n\n\n// Placeholder correlation_id; DB check will replace it if existing ticket found\nparsed.correlation_id = parsed.correlation_id || uuidv4();\n\n// Telegram chat id\nparsed.external_id = String($input.first().json.message.chat.id || \"N/A\");\nparsed.chat_id = String($json.message?.chat?.id || \"0\");\n\n// Output for the next nodes\nreturn [{ json: parsed }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        960
      ],
      "id": "ea49029e-ba19-409d-8e58-599f0a1651a3",
      "name": "03a FN: Normalize + Hash",
      "notes": "Parses ticket info from freeform Telegram text (Name, Email, Phone, Subject, Description). Generates correlation ID (UUID) and dedupe key (SHA-256 hash of email+subject)."
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, correlation_id, chat_id\nFROM upsert_ticket(\n  $1::uuid,\n  $2::text,\n  $3::text,\n  $4::text,\n  $5::text,\n  $6::text,\n  $7::text,\n  $8::text,\n  $9::text,\n  $10::text,\n  $11::text,\n  $12::bigint\n);\n",
        "options": {
          "queryReplacement": "={{ $json.correlation_id }}\n{{ $json.requester_name }}\n{{ $json.requester_email }}\n{{ $json.requester_phone }}\n{{ $json.subject }}\n{{ $json.description }}\n{{ $json.source }}\n{{ $json.priority }}\n{{ $json.status }}\n{{ $json.dedupe_key }}\n{{ $json.external_id }}\n{{ $json.chat_id }}\n\n",
          "replaceEmptyStrings": true
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        560,
        960
      ],
      "id": "98c36c2d-ac44-49dd-9c68-f410c69f0dfa",
      "name": "04a DB: Upsert Ticket",
      "notesInFlow": true,
      "credentials": {
        "postgres": {
          "id": "fygXUREce51xEoZE",
          "name": "Postgres account"
        }
      },
      "notes": "Executes stored Postgres function upsert_ticket. Inserts or updates a ticket record with parsed fields. Requires function to exist in DB. \ncorrelation_id, source, external_id, requester_*, subject, description, status, priority, dedupe_key\nOutput: ticket ID and correlation ID"
    },
    {
      "parameters": {
        "chatId": "={{ $('01 Telegram Trigger: Intake + Status').item.json.message.from.id }}",
        "text": "=Ticket received ✅\nCorrelation ID: <code>{{ $json.correlation_id }}</code>\nSave this ID to check status later.\n",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        912,
        960
      ],
      "id": "cf1dd560-176a-4b80-b7aa-c46519be7389",
      "name": "05a Telegram Ack",
      "webhookId": "f2d3d095-31e4-4972-9047-5a6350672e43",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      },
      "notes": "Sends user-facing messages back to Telegram. Content depends on workflow branch (acknowledgment, errors, updates)."
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\nout_items = []\n\nfor item in items:\n    text = item[\"json\"].get(\"message\", {}).get(\"text\", \"\").strip()\n    parts = text.split(maxsplit=1)\n\n    if len(parts) == 2:\n        correlation_id = parts[1].strip()\n        # quick regex UUID check\n        if not re.match(r'^[0-9a-fA-F-]{36}$', correlation_id):\n            correlation_id = None\n    else:\n        correlation_id = None\n\n    out_items.append({\n        \"json\": {\n            \"correlation_id\": correlation_id,\n            \"chat_id\": item[\"json\"][\"message\"][\"chat\"][\"id\"]\n        }\n    })\n\nreturn out_items\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        224,
        528
      ],
      "id": "87f7ae26-b86f-4d09-adde-7017f268aa28",
      "name": "03b FN: Parse Status Command"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT subject, status, created_at, updated_at, chat_id\nFROM tickets\nWHERE correlation_id = $1::uuid;\n",
        "options": {
          "queryReplacement": "={{$json.correlation_id}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1008,
        160
      ],
      "id": "871fe5da-f886-48b7-884d-dcebb6b240e2",
      "name": "04b DB: Get Ticket Status",
      "retryOnFail": true,
      "alwaysOutputData": true,
      "notesInFlow": true,
      "credentials": {
        "postgres": {
          "id": "fygXUREce51xEoZE",
          "name": "Postgres account"
        }
      },
      "notes": "Fetches ticket info by correlation ID. Returns subject, status, timestamps. Handles missing tickets through the downstream IF node."
    },
    {
      "parameters": {
        "chatId": "={{ $('02 Switch: Route by Command').item.json.message.from.id }}",
        "text": "=✅ Ticket ID: {{ $json.chat_id }}\n📄 Ticket: {{ $json.subject }}\n📌 Status: {{ $json.status }}\n🕒 Created: {{ new Date($json.created_at).toLocaleString(\"en-GB\", { dateStyle: \"medium\", timeStyle: \"short\" }) }}\n🔄 Last Updated: {{ new Date($json.updated_at).toLocaleString(\"en-GB\", { dateStyle: \"medium\", timeStyle: \"short\" }) }}\n\n",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2384,
        608
      ],
      "id": "cab20db5-d368-4111-acfb-0fae2e7a55a2",
      "name": "05b Telegram: Status Reply",
      "webhookId": "bae8bec4-4af5-4bf9-bba6-218b8bd5b0f8",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3a901b12-fe84-4f01-993a-185a2753eb0e",
              "leftValue": "={{ $json.correlation_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        688,
        176
      ],
      "id": "aa78e1ce-63bb-47d8-ac1f-c010c298c17e",
      "name": "03b1 IF: Has Correlation ID"
    },
    {
      "parameters": {
        "chatId": "={{$json.chat_id}}",
        "text": "=❌ Please provide a correlation ID.\nFormat: /status correlation_id\n",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1008,
        432
      ],
      "id": "c360b869-c7eb-4270-88d6-9bf801ada2d6",
      "name": "05b Telegram: Status Reply (Error)",
      "webhookId": "4095be65-c09f-4d65-8800-8f8d9e5b46a4",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      },
      "notes": "Sends user-facing messages back to Telegram. Content depends on workflow branch (acknowledgment, errors, updates)."
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.from.id }}",
        "text": "=⚠️ I didn’t understand that request.\nTry /new or /status <ID>.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        224,
        1872
      ],
      "id": "f3116469-b601-436e-b3c6-bf42a893a0f6",
      "name": "Telegram: Invalid Command",
      "webhookId": "84089957-fe6b-432b-8828-ccd7930ce954",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\nout_items = []\n\nfor item in items:\n    text = item[\"json\"].get(\"message\", {}).get(\"text\", \"\").strip()\n    parts = text.split(maxsplit=2)\n\n    if len(parts) == 3:\n        correlation_id, new_status = parts[1], parts[2].lower()\n        if not re.match(r'^[0-9a-fA-F-]{36}$', correlation_id):\n            correlation_id = None\n    else:\n        correlation_id, new_status = None, None\n\n    out_items.append({\n        \"json\": {\n            \"correlation_id\": correlation_id,\n            \"new_status\": new_status,\n            \"chat_id\": item[\"json\"][\"message\"][\"chat\"][\"id\"]\n        }\n    })\n\nreturn out_items\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        544,
        1280
      ],
      "id": "24070bee-55b0-4920-aab3-35c2d8bdf8a2",
      "name": "03c FN: Parse Update Command"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "49a8e0db-73d3-4615-add4-c21fe8eb2fb4",
              "leftValue": "={{ $json.correlation_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1248,
        1056
      ],
      "id": "fb6323a2-e264-4d4e-826b-fb64e1acb26c",
      "name": "03c1 IF: Has Correlation ID"
    },
    {
      "parameters": {
        "chatId": "={{ $('01 Telegram Trigger: Intake + Status').item.json.message.from.id }}",
        "text": "=❌ Invalid or missing correlation ID. Format: /update <ID> <status>.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1584,
        1344
      ],
      "id": "13401a4f-f18e-490e-94fd-51ea6cf3d089",
      "name": "Send a text message",
      "webhookId": "168df2e1-e83a-4ba9-b679-072bd8f51df8",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9ee9632a-361a-4cd3-a842-8e839ae84c2d",
              "leftValue": "={{ $json[\"new_status\"] }}",
              "rightValue": "new",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "5e821125-60f9-45ce-b803-f50a5a3b0776",
              "leftValue": "={{ $json[\"new_status\"] }}",
              "rightValue": "in_progress",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "8205c0d2-293f-43bc-aaec-2200f801b851",
              "leftValue": "={{ $json[\"new_status\"] }}",
              "rightValue": "resolved",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1600,
        1040
      ],
      "id": "b912f0e4-2188-4ad6-9e3e-1b20cf266926",
      "name": "03c2 IF: Valid Status"
    },
    {
      "parameters": {
        "chatId": "={{ $('01 Telegram Trigger: Intake + Status').item.json.message.from.id }}",
        "text": "=⚠️ Invalid status. Allowed values: new, in_progress, resolved.",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2384,
        1520
      ],
      "id": "c0814365-f15b-4007-b657-4251ba4bcdb5",
      "name": "05c Telegram: Invalid Status",
      "webhookId": "477de1f0-cea0-4b5e-80e8-283af9452d4a",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      },
      "notes": "Sends user-facing messages back to Telegram. Content depends on workflow branch (acknowledgment, errors, updates)."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "02a8b086-3e20-4576-a746-9e0bde67aba4",
              "leftValue": "={{ $json[\"chat_id\"] }}",
              "rightValue": "74166550",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        848,
        1280
      ],
      "id": "a94ae0b3-0f56-4005-9d6d-cc0498ad6eb3",
      "name": "03c0 IF: Is Operator"
    },
    {
      "parameters": {
        "chatId": "={{ $('01 Telegram Trigger: Intake + Status').item.json.message.from.id }}",
        "text": "=❌ You don’t have permission to update tickets.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1264,
        1472
      ],
      "id": "6cd73f91-25bb-4b62-afd8-00d41a1964c1",
      "name": "05c0 Telegram: Unauthorized Update Attempt",
      "webhookId": "c0905e30-f115-4e85-9b24-ab26e3954ad3",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "19a37b2c-e9ae-4a6c-9e6d-47f3fa7e5e69",
              "leftValue": "={{ $json[\"chat_id\"] }}",
              "rightValue": "={{ $('01 Telegram Trigger: Intake + Status').item.json.message.chat.id }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2016,
        624
      ],
      "id": "a4eccc11-7910-4f0f-9c1c-41cbee20620b",
      "name": "04b1 IF: Ticket Belongs To User"
    },
    {
      "parameters": {
        "chatId": "={{ $('02 Switch: Route by Command').item.json.message.from.id }}",
        "text": "=❌ You do not have access to this ticket.\nOnly the ticket creator can view its status.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2400,
        896
      ],
      "id": "c9cf0d2b-8159-4cff-b9dd-33fdfb54939b",
      "name": "05b1 Telegram: Unauthorized Status Check",
      "webhookId": "0fa252cb-177d-4e95-8456-34753477d976",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f367a262-4b55-40ad-a0ef-711ac9ebfa10",
              "leftValue": "={{ !!$json.error }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1760,
        384
      ],
      "id": "6f803122-57d8-4dda-a62f-821e9f85a3dc",
      "name": "04b0 IF: DB Lookup Failed?"
    },
    {
      "parameters": {
        "chatId": "={{ $('02 Switch: Route by Command').item.json.message.from.id }}",
        "text": "=❌ Sorry, I couldn’t fetch your ticket right now. Please try again in a minute.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2384,
        368
      ],
      "id": "a0d0c661-a39b-470a-a441-70f66fc465f4",
      "name": "05b0 Telegram: Status DB Error",
      "webhookId": "96e6b1fa-9500-4e81-8433-ec87963af06b",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1a87141a-6e78-4222-9523-00795be95f6f",
              "leftValue": "={{ $json[\"subject\"] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1360,
        160
      ],
      "id": "3d286e56-7a5c-47b6-9aa6-26a688105c2d",
      "name": "04b1 IF: No Ticket Found"
    },
    {
      "parameters": {
        "chatId": "={{ $('02 Switch: Route by Command').item.json.message.from.id }}",
        "text": "=❌ No ticket found with that ID.\nDouble-check your ID or create a new ticket with /new",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1744,
        144
      ],
      "id": "e1741c50-435e-4620-a52b-729a1433d669",
      "name": "Send a text message1",
      "webhookId": "cc28681b-50ca-45f5-a024-bef21cb8ae36",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0bfef915-ea45-4b6d-bf12-8999b67b8044",
              "leftValue": "={{$json.correlation_id}}",
              "rightValue": "=^[0-9a-fA-F-]{36}$",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        528,
        528
      ],
      "id": "5cd8a26a-27fb-4a7b-bed3-a374184e5118",
      "name": "03b IF: Has Valid Correlation ID Format"
    },
    {
      "parameters": {
        "chatId": "={{$json.chat_id}}",
        "text": "=⚠️ Invalid ticket ID format. Please provide a valid correlation ID (UUID).",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        912,
        720
      ],
      "id": "c44d6804-c1b3-470b-a4dc-db91dd45759b",
      "name": "Send a text message2",
      "webhookId": "2291928b-6bdc-4071-84f6-f8d84484198e",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.from.id }}",
        "text": "=👋 <b>Welcome to the Support Bot</b>  \n\nYou can create and manage tickets right here:  \n\n• <b>/new</b> — Open a new support ticket  \n• <b>/update &lt;ID&gt; &lt;status&gt;</b> — Update your ticket’s status  \n• <b>/status &lt;ID&gt;</b> — Check the current status of a ticket  \n\n💡 Save your <b>Ticket ID</b> when you create one — you’ll need it for updates. ✅\n",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        192,
        128
      ],
      "id": "291233ac-8b18-4349-bbcf-fb4b6162e734",
      "name": "Welcome Message",
      "webhookId": "b7ac58ed-e8d7-48e8-b9a1-3a52e1376b2c",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.from.id }}",
        "text": "=❌ <b>You are not authorized to use this command.</b>",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1248,
        2080
      ],
      "id": "8e802c3e-2216-466e-8a5d-98c4aa97f2ad",
      "name": "Send a text message3",
      "webhookId": "42cc248a-3229-49e4-a21a-2c2ed5059a49",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "ce4f2418-7a43-44b5-845e-8abf8d0108b2",
              "leftValue": "={{$json[\"message\"][\"from\"][\"id\"]}}",
              "rightValue": "=74166550",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        736,
        1664
      ],
      "id": "dd6b09d3-92e4-4652-bb58-655f233d4656",
      "name": "Check Admin"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT correlation_id, subject, status, created_at\nFROM tickets\nORDER BY created_at DESC\nLIMIT 10;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1248,
        1792
      ],
      "id": "cf073cb2-ddc6-46a1-a4d9-6646833ce984",
      "name": "DB: List Tickets",
      "credentials": {
        "postgres": {
          "id": "fygXUREce51xEoZE",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1664,
        1792
      ],
      "id": "85f5c35c-10f1-417b-97e5-497d29c0e505",
      "name": "Send a text message4",
      "webhookId": "93444267-52aa-4b71-bb7a-ade43f15f6ad",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const tickets = items;\n\nlet message = \"📋 <b>Latest Tickets</b>\\n\\n\";\n\ntickets.forEach((row, i) => {\n  message += `${i+1}. <b>ID:</b> <code>${row.json.correlation_id}</code>\\n`;\n  message += `   <b>Status:</b> ${row.json.status}\\n`;\n  message += `   <i>${row.json.subject || \"No subject\"}</i>\\n`;\n  message += `   Created: ${row.json.created_at}\\n\\n`;\n});\n\n// pull original chat_id from the trigger\nconst chatId = $(\"01 Telegram Trigger: Intake + Status\").item.json.message.from.id;\n\nreturn [{ json: { text: message, chat_id: chatId } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1456,
        1792
      ],
      "id": "8df8fda2-74bc-48ad-b6d5-a08680ae8e8c",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "content": "# 🛠 Setup Requirements\n\n---\n\n## 1️⃣ Database Tables\n- **tickets**  \n  `(id, correlation_id, chat_id, requester_name, requester_email, requester_phone, subject, description, status, priority, dedupe_key, created_at, updated_at)`\n\n- **ticket_audit**  \n  `(ticket_id, correlation_id, action, new_status, actor_chat_id, created_at)`\n\n- **workflow_errors**  \n  `(workflow_id, workflow_name, execution_id, last_node_executed, error_message, json_payload, created_at)`\n\n---\n\n## 2️⃣ Stored Function: `upsert_ticket`\n- Purpose: insert **or** update tickets.  \n- **Inputs:**  \n  `correlation_id, source, external_id, requester_name, requester_email, requester_phone, subject, description, status, priority, dedupe_key, external_id`  \n- **Returns:**  \n  `ticket_id, correlation_id, chat_id`\n\n---\n\n## 3️⃣ Credentials\n- Add **Postgres** credentials in n8n (must match your DB).  \n- Add **Telegram Bot** credentials in n8n.  \n\n---\n\n## 4️⃣ Placeholders to Replace\n- `YOUR_ADMIN_ID` → replace with your own Telegram ID (for admin-only commands like /list).  \n- `YOUR_OPERATOR_ID` → replace with the operator’s Telegram ID (for /update permissions).   \n\n👉 Use [@userinfobot](https://t.me/userinfobot) in Telegram to find your ID.\n",
        "height": 1104,
        "width": 736,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1872,
        752
      ],
      "typeVersion": 1,
      "id": "7fbd43dd-a1b6-41d8-8aa9-226ba065c8bf",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# 📌 Function: upsert_ticket\n\n### Purpose → Insert or update a support ticket in the tickets table.\n### Returns → id, correlation_id, chat_id.\n\n### 🧩 SQL Template\n-- CREATE OR REPLACE FUNCTION public.upsert_ticket(\n    _correlation_id UUID,\n    _source TEXT,\n    _external_id TEXT,\n    _requester_name TEXT,\n    _requester_email TEXT,\n    _requester_phone TEXT,\n    _subject TEXT,\n    _description TEXT,\n    _status TEXT,\n    _priority TEXT,\n    _dedupe_key TEXT,\n    _chat_id BIGINT  -- Make sure this is BIGINT\n)\nRETURNS TABLE (id BIGINT, correlation_id UUID, chat_id BIGINT)\nAS $$\n#variable_conflict use_column  -- <-- ADD THIS LINE\nBEGIN\n  INSERT INTO public.tickets AS t (\n      correlation_id, source, external_id, requester_name, requester_email, \n      requester_phone, subject, description, status, priority, dedupe_key, \n      chat_id, created_at, updated_at\n  )\n  VALUES (\n      _correlation_id, _source, _external_id, _requester_name, _requester_email, \n      _requester_phone, _subject, _description, _status, _priority, _dedupe_key, \n      _chat_id, NOW(), NOW()\n  )\n  ON CONFLICT (correlation_id)\n  DO UPDATE\n  SET \n      source          = EXCLUDED.source,         -- <-- Added this\n      external_id     = EXCLUDED.external_id,  -- <-- Added this\n      requester_name  = EXCLUDED.requester_name,\n      requester_email = EXCLUDED.requester_email,\n      requester_phone = EXCLUDED.requester_phone,\n      subject         = EXCLUDED.subject,\n      description     = EXCLUDED.description,\n      status          = EXCLUDED.status,\n      priority        = EXCLUDED.priority,\n      dedupe_key      = EXCLUDED.dedupe_key,\n      updated_at      = NOW();\n\n  RETURN QUERY\n  SELECT t.id, t.correlation_id, t.chat_id\n  FROM public.tickets AS t\n  WHERE t.correlation_id = _correlation_id;\nEND;\n$$ LANGUAGE plpgsql;",
        "height": 1104,
        "width": 688
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1088,
        752
      ],
      "typeVersion": 1,
      "id": "cc404aeb-f1f3-4bb8-b5fd-9e8e7b3889b7",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import hashlib\nimport hmac\nimport time\nimport os\n\nttl_minutes = 30\nsecret = os.getenv(\"SECRET_KEY\", \"supersecret\")  # env var or fallback\nbase_url = \"https://myn8n.megaheretz1378.website/webhook-test/approval\"\n\nnow = int(time.time())\nexpires_at = now + ttl_minutes * 60\n\nout = []\n\nfor item in items:\n    cid = item[\"json\"].get(\"correlation_id\")\n    new_status = item[\"json\"].get(\"new_status\")\n\n    # build payload string\n    payload = f\"{cid}|{new_status}|{expires_at}\"\n    sig = hmac.new(secret.encode(), payload.encode(), hashlib.sha256).hexdigest()\n\n    approve_link = f\"{base_url}?cid={cid}&status={new_status}&action=approve&exp={expires_at}&sig={sig}\"\n    reject_link  = f\"{base_url}?cid={cid}&status={new_status}&action=reject&exp={expires_at}&sig={sig}\"\n\n    out.append({\n        \"json\": {\n            **item[\"json\"],\n            \"approve_link\": approve_link,\n            \"reject_link\": reject_link,\n            \"expires_at\": expires_at\n        }\n    })\n\nreturn out\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2368,
        1200
      ],
      "id": "35e92436-a66c-4237-a9c5-651c09c2f52a",
      "name": "04c0 FN: Generate Approval Request"
    },
    {
      "parameters": {
        "chatId": "74166550",
        "text": "=⚠️ Approval Required\nTicket: {{ $json.correlation_id }}\nRequested Status: {{ $json.new_status }}\n\n✅ Approve: {{ $json.approve_link }}\n❌ Reject: {{ $json.reject_link }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Approve ✅",
                    "additionalFields": {
                      "url": "={{ $json.approve_link }}"
                    }
                  },
                  {
                    "text": "Reject ❌",
                    "additionalFields": {
                      "url": "={{ $json.reject_link }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2656,
        1200
      ],
      "id": "5a434b56-bdc9-41f4-b006-1a0e0d64e038",
      "name": "Approval Required",
      "webhookId": "28f24cef-3e3a-403b-8ff6-fb1998010062",
      "credentials": {
        "telegramApi": {
          "id": "gNzLp6KDcHUJs4ZN",
          "name": "intake-bot"
        }
      }
    }
  ],
  "connections": {
    "01 Telegram Trigger: Intake + Status": {
      "main": [
        [
          {
            "node": "02 Switch: Route by Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "02 Switch: Route by Command": {
      "main": [
        [
          {
            "node": "Welcome Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "03b FN: Parse Status Command",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "03a FN: Normalize + Hash",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "03c FN: Parse Update Command",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Admin",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram: Invalid Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "03a FN: Normalize + Hash": {
      "main": [
        [
          {
            "node": "04a DB: Upsert Ticket",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "04a DB: Upsert Ticket": {
      "main": [
        [
          {
            "node": "05a Telegram Ack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "03b FN: Parse Status Command": {
      "main": [
        [
          {
            "node": "03b IF: Has Valid Correlation ID Format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "04b DB: Get Ticket Status": {
      "main": [
        [
          {
            "node": "04b1 IF: No Ticket Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "03b1 IF: Has Correlation ID": {
      "main": [
        [
          {
            "node": "04b DB: Get Ticket Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "05b Telegram: Status Reply (Error)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "03c FN: Parse Update Command": {
      "main": [
        [
          {
            "node": "03c0 IF: Is Operator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "03c1 IF: Has Correlation ID": {
      "main": [
        [
          {
            "node": "03c2 IF: Valid Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "03c2 IF: Valid Status": {
      "main": [
        [
          {
            "node": "04c0 FN: Generate Approval Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "05c Telegram: Invalid Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "03c0 IF: Is Operator": {
      "main": [
        [
          {
            "node": "03c1 IF: Has Correlation ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "05c0 Telegram: Unauthorized Update Attempt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "04b1 IF: Ticket Belongs To User": {
      "main": [
        [
          {
            "node": "05b Telegram: Status Reply",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "05b1 Telegram: Unauthorized Status Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "04b0 IF: DB Lookup Failed?": {
      "main": [
        [
          {
            "node": "05b0 Telegram: Status DB Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "04b1 IF: Ticket Belongs To User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "04b1 IF: No Ticket Found": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "04b0 IF: DB Lookup Failed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "03b IF: Has Valid Correlation ID Format": {
      "main": [
        [
          {
            "node": "03b1 IF: Has Correlation ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Admin": {
      "main": [
        [
          {
            "node": "DB: List Tickets",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB: List Tickets": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Send a text message4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "04c0 FN: Generate Approval Request": {
      "main": [
        [
          {
            "node": "Approval Required",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9c8d0d4640139c59e2bc183c0a14df0fbc0573cb91e494f5db8144fe78fe28ca"
  }
}
